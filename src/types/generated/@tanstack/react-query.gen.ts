// This file is auto-generated by @hey-api/openapi-ts

import { type UseMutationOptions, queryOptions } from "@tanstack/react-query";
import { client as _heyApiClient } from "../client.gen";
import {
  type Options,
  deleteApiBoards,
  getApiBoards,
  postApiBoards,
  putApiBoards,
  deleteApiKanbantasks,
  getApiKanbantasks,
  postApiKanbantasks,
  putApiKanbantasks,
  putApiKanbantasksStatus,
  putApiKanbantasksColumn,
  postApiBoardcolumns,
  postApiSubtasks,
} from "../sdk.gen";
import type {
  DeleteApiBoardsData,
  DeleteApiBoardsError,
  DeleteApiBoardsResponse,
  GetApiBoardsData,
  PostApiBoardsData,
  PostApiBoardsError,
  PostApiBoardsResponse,
  PutApiBoardsData,
  PutApiBoardsError,
  PutApiBoardsResponse,
  DeleteApiKanbantasksData,
  DeleteApiKanbantasksError,
  DeleteApiKanbantasksResponse,
  GetApiKanbantasksData,
  PostApiKanbantasksData,
  PostApiKanbantasksError,
  PostApiKanbantasksResponse,
  PutApiKanbantasksData,
  PutApiKanbantasksError,
  PutApiKanbantasksResponse,
  PutApiKanbantasksStatusData,
  PutApiKanbantasksStatusError,
  PutApiKanbantasksStatusResponse,
  PutApiKanbantasksColumnData,
  PutApiKanbantasksColumnError,
  PutApiKanbantasksColumnResponse,
  PostApiBoardcolumnsData,
  PostApiBoardcolumnsError,
  PostApiBoardcolumnsResponse,
  PostApiSubtasksData,
  PostApiSubtasksError,
  PostApiSubtasksResponse,
} from "../types.gen";

export const deleteApiBoardsMutation = (
  options?: Partial<Options<DeleteApiBoardsData>>,
): UseMutationOptions<
  DeleteApiBoardsResponse,
  DeleteApiBoardsError,
  Options<DeleteApiBoardsData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiBoardsResponse,
    DeleteApiBoardsError,
    Options<DeleteApiBoardsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiBoards({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const getApiBoardsQueryKey = (options?: Options<GetApiBoardsData>) =>
  createQueryKey("getApiBoards", options);

export const getApiBoardsOptions = (options?: Options<GetApiBoardsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiBoards({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiBoardsQueryKey(options),
  });
};

export const postApiBoardsQueryKey = (options: Options<PostApiBoardsData>) =>
  createQueryKey("postApiBoards", options);

export const postApiBoardsOptions = (options: Options<PostApiBoardsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiBoards({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiBoardsQueryKey(options),
  });
};

export const postApiBoardsMutation = (
  options?: Partial<Options<PostApiBoardsData>>,
): UseMutationOptions<
  PostApiBoardsResponse,
  PostApiBoardsError,
  Options<PostApiBoardsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiBoardsResponse,
    PostApiBoardsError,
    Options<PostApiBoardsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiBoards({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putApiBoardsMutation = (
  options?: Partial<Options<PutApiBoardsData>>,
): UseMutationOptions<
  PutApiBoardsResponse,
  PutApiBoardsError,
  Options<PutApiBoardsData>
> => {
  const mutationOptions: UseMutationOptions<
    PutApiBoardsResponse,
    PutApiBoardsError,
    Options<PutApiBoardsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiBoards({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const deleteApiKanbantasksMutation = (
  options?: Partial<Options<DeleteApiKanbantasksData>>,
): UseMutationOptions<
  DeleteApiKanbantasksResponse,
  DeleteApiKanbantasksError,
  Options<DeleteApiKanbantasksData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteApiKanbantasksResponse,
    DeleteApiKanbantasksError,
    Options<DeleteApiKanbantasksData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await deleteApiKanbantasks({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getApiKanbantasksQueryKey = (
  options: Options<GetApiKanbantasksData>,
) => createQueryKey("getApiKanbantasks", options);

export const getApiKanbantasksOptions = (
  options: Options<GetApiKanbantasksData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApiKanbantasks({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getApiKanbantasksQueryKey(options),
  });
};

export const postApiKanbantasksQueryKey = (
  options: Options<PostApiKanbantasksData>,
) => createQueryKey("postApiKanbantasks", options);

export const postApiKanbantasksOptions = (
  options: Options<PostApiKanbantasksData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiKanbantasks({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiKanbantasksQueryKey(options),
  });
};

export const postApiKanbantasksMutation = (
  options?: Partial<Options<PostApiKanbantasksData>>,
): UseMutationOptions<
  PostApiKanbantasksResponse,
  PostApiKanbantasksError,
  Options<PostApiKanbantasksData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiKanbantasksResponse,
    PostApiKanbantasksError,
    Options<PostApiKanbantasksData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiKanbantasks({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putApiKanbantasksMutation = (
  options?: Partial<Options<PutApiKanbantasksData>>,
): UseMutationOptions<
  PutApiKanbantasksResponse,
  PutApiKanbantasksError,
  Options<PutApiKanbantasksData>
> => {
  const mutationOptions: UseMutationOptions<
    PutApiKanbantasksResponse,
    PutApiKanbantasksError,
    Options<PutApiKanbantasksData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiKanbantasks({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putApiKanbantasksStatusMutation = (
  options?: Partial<Options<PutApiKanbantasksStatusData>>,
): UseMutationOptions<
  PutApiKanbantasksStatusResponse,
  PutApiKanbantasksStatusError,
  Options<PutApiKanbantasksStatusData>
> => {
  const mutationOptions: UseMutationOptions<
    PutApiKanbantasksStatusResponse,
    PutApiKanbantasksStatusError,
    Options<PutApiKanbantasksStatusData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiKanbantasksStatus({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const putApiKanbantasksColumnMutation = (
  options?: Partial<Options<PutApiKanbantasksColumnData>>,
): UseMutationOptions<
  PutApiKanbantasksColumnResponse,
  PutApiKanbantasksColumnError,
  Options<PutApiKanbantasksColumnData>
> => {
  const mutationOptions: UseMutationOptions<
    PutApiKanbantasksColumnResponse,
    PutApiKanbantasksColumnError,
    Options<PutApiKanbantasksColumnData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await putApiKanbantasksColumn({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiBoardcolumnsQueryKey = (
  options: Options<PostApiBoardcolumnsData>,
) => createQueryKey("postApiBoardcolumns", options);

export const postApiBoardcolumnsOptions = (
  options: Options<PostApiBoardcolumnsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiBoardcolumns({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiBoardcolumnsQueryKey(options),
  });
};

export const postApiBoardcolumnsMutation = (
  options?: Partial<Options<PostApiBoardcolumnsData>>,
): UseMutationOptions<
  PostApiBoardcolumnsResponse,
  PostApiBoardcolumnsError,
  Options<PostApiBoardcolumnsData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiBoardcolumnsResponse,
    PostApiBoardcolumnsError,
    Options<PostApiBoardcolumnsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiBoardcolumns({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const postApiSubtasksQueryKey = (
  options: Options<PostApiSubtasksData>,
) => createQueryKey("postApiSubtasks", options);

export const postApiSubtasksOptions = (
  options: Options<PostApiSubtasksData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await postApiSubtasks({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: postApiSubtasksQueryKey(options),
  });
};

export const postApiSubtasksMutation = (
  options?: Partial<Options<PostApiSubtasksData>>,
): UseMutationOptions<
  PostApiSubtasksResponse,
  PostApiSubtasksError,
  Options<PostApiSubtasksData>
> => {
  const mutationOptions: UseMutationOptions<
    PostApiSubtasksResponse,
    PostApiSubtasksError,
    Options<PostApiSubtasksData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await postApiSubtasks({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};
