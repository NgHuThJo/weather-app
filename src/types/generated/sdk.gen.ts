// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import { client as _heyApiClient } from "./client.gen";
import type {
  DeleteApiBoardsData,
  DeleteApiBoardsResponses,
  DeleteApiBoardsErrors,
  GetApiBoardsData,
  GetApiBoardsResponses,
  PostApiBoardsData,
  PostApiBoardsResponses,
  PostApiBoardsErrors,
  PutApiBoardsData,
  PutApiBoardsResponses,
  PutApiBoardsErrors,
  DeleteApiKanbantasksData,
  DeleteApiKanbantasksResponses,
  DeleteApiKanbantasksErrors,
  GetApiKanbantasksData,
  GetApiKanbantasksResponses,
  GetApiKanbantasksErrors,
  PostApiKanbantasksData,
  PostApiKanbantasksResponses,
  PostApiKanbantasksErrors,
  PutApiKanbantasksData,
  PutApiKanbantasksResponses,
  PutApiKanbantasksErrors,
  PutApiKanbantasksStatusData,
  PutApiKanbantasksStatusResponses,
  PutApiKanbantasksStatusErrors,
  PutApiKanbantasksColumnData,
  PutApiKanbantasksColumnResponses,
  PutApiKanbantasksColumnErrors,
  PostApiBoardcolumnsData,
  PostApiBoardcolumnsResponses,
  PostApiBoardcolumnsErrors,
  PostApiSubtasksData,
  PostApiSubtasksResponses,
  PostApiSubtasksErrors,
} from "./types.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export const deleteApiBoards = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiBoardsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiBoardsResponses,
    DeleteApiBoardsErrors,
    ThrowOnError
  >({
    url: "/api/boards",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getApiBoards = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiBoardsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiBoardsResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/boards",
    ...options,
  });
};

export const postApiBoards = <ThrowOnError extends boolean = false>(
  options: Options<PostApiBoardsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiBoardsResponses,
    PostApiBoardsErrors,
    ThrowOnError
  >({
    url: "/api/boards",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const putApiBoards = <ThrowOnError extends boolean = false>(
  options: Options<PutApiBoardsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiBoardsResponses,
    PutApiBoardsErrors,
    ThrowOnError
  >({
    url: "/api/boards",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const deleteApiKanbantasks = <ThrowOnError extends boolean = false>(
  options: Options<DeleteApiKanbantasksData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteApiKanbantasksResponses,
    DeleteApiKanbantasksErrors,
    ThrowOnError
  >({
    url: "/api/kanbantasks",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const getApiKanbantasks = <ThrowOnError extends boolean = false>(
  options: Options<GetApiKanbantasksData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetApiKanbantasksResponses,
    GetApiKanbantasksErrors,
    ThrowOnError
  >({
    url: "/api/kanbantasks",
    ...options,
  });
};

export const postApiKanbantasks = <ThrowOnError extends boolean = false>(
  options: Options<PostApiKanbantasksData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiKanbantasksResponses,
    PostApiKanbantasksErrors,
    ThrowOnError
  >({
    url: "/api/kanbantasks",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const putApiKanbantasks = <ThrowOnError extends boolean = false>(
  options: Options<PutApiKanbantasksData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiKanbantasksResponses,
    PutApiKanbantasksErrors,
    ThrowOnError
  >({
    url: "/api/kanbantasks",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const putApiKanbantasksStatus = <ThrowOnError extends boolean = false>(
  options: Options<PutApiKanbantasksStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiKanbantasksStatusResponses,
    PutApiKanbantasksStatusErrors,
    ThrowOnError
  >({
    url: "/api/kanbantasks/status",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const putApiKanbantasksColumn = <ThrowOnError extends boolean = false>(
  options: Options<PutApiKanbantasksColumnData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    PutApiKanbantasksColumnResponses,
    PutApiKanbantasksColumnErrors,
    ThrowOnError
  >({
    url: "/api/kanbantasks/column",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postApiBoardcolumns = <ThrowOnError extends boolean = false>(
  options: Options<PostApiBoardcolumnsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiBoardcolumnsResponses,
    PostApiBoardcolumnsErrors,
    ThrowOnError
  >({
    url: "/api/boardcolumns",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

export const postApiSubtasks = <ThrowOnError extends boolean = false>(
  options: Options<PostApiSubtasksData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiSubtasksResponses,
    PostApiSubtasksErrors,
    ThrowOnError
  >({
    url: "/api/subtasks",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};
